// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	server "github.com/humanbelnik/load-balancer/internal/server/server"
	mock "github.com/stretchr/testify/mock"
)

// Policy is an autogenerated mock type for the Policy type
type Policy struct {
	mock.Mock
}

// Select provides a mock function with given fields: servers
func (_m *Policy) Select(servers []server.Server) (server.Server, error) {
	ret := _m.Called(servers)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 server.Server
	var r1 error
	if rf, ok := ret.Get(0).(func([]server.Server) (server.Server, error)); ok {
		return rf(servers)
	}
	if rf, ok := ret.Get(0).(func([]server.Server) server.Server); ok {
		r0 = rf(servers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Server)
		}
	}

	if rf, ok := ret.Get(1).(func([]server.Server) error); ok {
		r1 = rf(servers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPolicy creates a new instance of Policy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *Policy {
	mock := &Policy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
